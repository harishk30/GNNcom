{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNGxsXuP67Ag4fImCJY9sO9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harishk30/GNNcom/blob/main/COM_GNN.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install torch_geometric"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y4z3OFfXKuWX",
        "outputId": "3e130c64-df01-4e71-95cb-1d9c1c862fae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting torch_geometric\n",
            "  Downloading torch_geometric-2.4.0-py3-none-any.whl (1.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (4.66.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (1.23.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (1.11.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (3.1.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (2.31.0)\n",
            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (3.1.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (1.2.2)\n",
            "Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch_geometric) (5.9.5)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch_geometric) (2.1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch_geometric) (2023.7.22)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch_geometric) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch_geometric) (3.2.0)\n",
            "Installing collected packages: torch_geometric\n",
            "Successfully installed torch_geometric-2.4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch_geometric.data import Data"
      ],
      "metadata": {
        "id": "ufAZcdqAKiJE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SbxzJjPnJ2zi"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "def create_points(cube_length):\n",
        "  points = []\n",
        "  mass = []\n",
        "  for i in range (0, 100):\n",
        "    x = random.randrange(0, cube_length)\n",
        "    y = random.randrange(0, cube_length)\n",
        "    z = random.randrange(0, cube_length)\n",
        "    m = random.randrange(0, 100)\n",
        "    points.append([x, y, z])\n",
        "    mass.append(m)\n",
        "  print(mass)\n",
        "  com = []\n",
        "  numerator_x = 0\n",
        "  numerator_y = 0\n",
        "  numerator_z = 0\n",
        "  den = 0\n",
        "  for i in range(len(points)):\n",
        "    numerator_x += mass[i] * points[i][0]\n",
        "    numerator_y += mass[i] * points[i][1]\n",
        "    numerator_z += mass[i] * points[i][2]\n",
        "    den += mass[i]\n",
        "  com = [numerator_x/den, numerator_y/den, numerator_z/den]\n",
        "  return [points, com, mass]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "points = create_points(100)"
      ],
      "metadata": {
        "id": "6NQukO6fNF6k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "def distance(point1, point2):\n",
        "  return math.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[3] - point1[3])**2)"
      ],
      "metadata": {
        "id": "L4N3mUVq5Ond"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_edges(points, dist):\n",
        "  edges = []\n",
        "  edge_value = []\n",
        "  for i in range(0, len(points[0])):\n",
        "    for j in range(0, len(points[0])):\n",
        "      if(j != i):\n",
        "        two_dist = distance(points[0][j], points[0][i])\n",
        "        if(two_dist <= dist):\n",
        "          edges.append([i, j])\n",
        "          edge_value.append(two_dist)\n",
        "  return [edges, edge_value]"
      ],
      "metadata": {
        "id": "IKiVdUWHOi7O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "edges = create_edges(points, 50/3)\n",
        "edge = edges[0]\n",
        "edge_value = edges[1]"
      ],
      "metadata": {
        "id": "gzuNBW6VO4fu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "point_values = points[0]\n",
        "center_of_mass = points[1]"
      ],
      "metadata": {
        "id": "qS9g2s1jPF9z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(len(points[0])):\n",
        "  point_values[i].append(points[2][i])"
      ],
      "metadata": {
        "id": "n0YH9Apy32IM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_graph(cube_len, i):\n",
        "  points = create_points(cube_len)\n",
        "  point_values = points[0]\n",
        "  center_of_mass = points[1]\n",
        "  for i in range(len(points[0])):\n",
        "    point_values[i].append(points[2][i])\n",
        "  edges = create_edges(points, cube_len/i)\n",
        "  edge = edges[0]\n",
        "  edge_value = edges[1]\n",
        "  return [points, point_values, edge, edge_value, center_of_mass]"
      ],
      "metadata": {
        "id": "mzn_kXng6gWG"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}